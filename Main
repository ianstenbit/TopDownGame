boolean inInventory = false;
PlayerClass player = new PlayerClass();
InventorySlot[] inventorySlots = new InventorySlot[40];
ArrayList<TerrainObject> terrainArray;
int testVar;
PFont font;

void setup() {
  size(800, 800);

  font = createFont("TimesNewRoman", 12);

  terrainArray = new ArrayList<TerrainObject>();
  for (int i = 0; i < 20; i++) {
    terrainArray.add(new TerrainObject());
  }

  //initialize invent array
  for (int i = 0; i<inventorySlots.length; i++) {
    inventorySlots[i] = new InventorySlot();
  }
}

void draw() {
  textAlign(CENTER);
  pushMatrix();
  translate(player.xPos, player.yPos); 
  background(255);
  fill(255, 0, 0);              //making
  rect(-800, -800, 2400, 2400); // a 
  fill(0, 255, 0);              //test
  rect(0, 0, width, height);    //world
  //player.moveWithMouse(mouseX, mouseY);
  //initialize TerrainArray
  for (int i = 0; i < terrainArray.size(); i++) {
    terrainArray.get(i).create();
  }

  player.checkForTerrainInteraction();
  popMatrix();

  player.manageInventory();

  for (int i = 0; i < terrainArray.size(); i++) {
    terrainArray.get(i).breakMe();
  }
  player.moveWithClicks(mouseX, mouseY);

  //update inventory slots to put in main bar and draw them
  for (int i = 0; i<inventorySlots.length; i++) {
    inventorySlots[i].checkMainBar();
    inventorySlots[i].manageScrollOver(mouseX, mouseY);
    if (inventorySlots[i].spaceFull) {
      inventorySlots[i].drawInSlot(inventorySlots[i].slotNumber);
    }
  }
}

void keyPressed() {
  if (key == 'e') {
    inInventory = !inInventory;
  }
  //inventorySlots[(key-48)].inHand = true;
}

int highestInventorySlot() {
  while(inventorySlots[testVar].spaceFull) {
    testVar++;
  } 
    return testVar;
 


  /*for (int i = 0; i < inventorySlots.length; i++) {
    if (inventorySlots[i].spaceFull = false) {
      testVar = i;
    }
  }
  return testVar; */
}
